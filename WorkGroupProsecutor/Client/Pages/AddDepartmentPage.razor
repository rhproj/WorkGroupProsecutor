@page "/adddepartment"
@attribute [Authorize(Roles = "Administrator")]

<PageTitle>Добавить Отдел</PageTitle>
<h3>Добавить Отдел</h3>

<EditForm Model="@department" OnValidSubmit="SaveDepartmetn">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="DepartmentIndex" class="form-label">Department Index</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="department.DepartmentIndex" />
        </div>
        <ValidationMessage For="@(() => department.DepartmentIndex)" />
    </div>
    <div class="mb-3">
        <label for="DepartmentName" class="form-label">Department Name</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="department.DepartmentName" />
        </div>
        <ValidationMessage For="@(() => department.DepartmentName)" />
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary">Save</button>
        <button class="btn btn-light" @onclick="GotToHomePage">Cancel</button>
    </div>
</EditForm>
<br />
<hr/>

<ol>
    @foreach (var d in departmentsList)
    {
        <li>@d</li>
    }
</ol>

@code {
    private List<Department> departmentsList = new();
    private Department department = new();
 
    protected override async Task OnInitializedAsync()
    {
        departmentsList = await httpClient.GetFromJsonAsync<List<Department>>("api/Department");
    }

    private async Task SaveDepartmetn() 
    {
        await httpClient.PostAsJsonAsync<Department>("api/Department", department); 
        GotToHomePage();
    }

    private void GotToHomePage()
    {
        navManager.NavigateTo("/counter");
    }
}
