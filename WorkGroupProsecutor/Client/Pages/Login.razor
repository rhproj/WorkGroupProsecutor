@page "/login"

@inject HttpClient httpClient
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

<div class="d-flex justify-content-center">
    <div class="px-5 py-5 border">
        <div class="mb-5 text-center">
            <h1>ВХОД</h1>
        </div>
        <div class="mb-3">
            <h2>Имя пользователя</h2>
            <input @bind="loginRequest.UserName" class="form-control form-control-lg" placeholder="Логин" />
        </div>
        <div class="mb-5 mt-3">
            <h2>Пароль</h2>
            <input @bind="loginRequest.Password" type="password" class="form-control form-control-lg" placeholder="Пароль" />
        </div>
        <div class="d-flex justify-content-center">
            <button @onclick="Authenticate" class="btn btn-primary btn-lg w-100">Войти</button>
        </div>
    </div>
</div>

@code {
    [Inject]
    public IUserService? UserService { get; set; }
    private LoginRequest loginRequest = new LoginRequest(); //used to fetch data form inputs

    private async Task Authenticate()
    {
        var loginResponse = await UserService.AuthenticateUser(loginRequest);    //await httpClient.PostAsJsonAsync<LoginRequest>("/api/Account/Login", loginRequest);

        if (loginResponse.IsSuccessStatusCode)
        {
            var userSession = await loginResponse.Content.ReadFromJsonAsync<UserSession>();
            var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(userSession);
            navManager.NavigateTo("/", true); //"/index" go Home
        }
        else if (loginResponse.StatusCode == HttpStatusCode.Unauthorized)
        {
            await js.InvokeVoidAsync("alert", "Неверный логин или пароль");
            return;
        }
    }
}