@page "/estimateredirectedappeal/{Id:int}"

<h3>Оценка возможности переадресации обращения №@appeal.RegistrationNumber</h3>
<div class="form-group">
    <table class="table">
        <tbody>
            <tr>
                <td>Прокуратура</td>
                <td>@appeal.District</td>
            </tr>
            <tr>
                <td>ФИО заявителя</td>
                <td>@appeal.ApplicantFullName</td>
            </tr>
            <tr>
                <td>Орган, в который предполагается переадресовать обращение</td>
                <td>@appeal.RecipientAgency</td>
            </tr>
            <tr>
                <td>Основание переадресации</td>
                <td>@appeal.DecisionBasis</td>
            </tr>
            <tr>
                <td>>Оценка возможности переадресации</td>
                <td>@appeal.DepartmentAssessment</td>
            </tr>
        </tbody>
    </table>
</div>
<div class="form-group">
    <button class="btn btn-outline-primary" @onclick="Approve">Да</button>
    <button class="btn btn-outline-danger" @onclick="Disapprove">Нет</button>
    <button class="btn btn-light" @onclick="GotBack">Отмена</button>
</div>

@code {
    [Inject]
    public IRedirectedAppealDataService RedirectedAppealDataService { get; set; }

    [Parameter]
    public int Id { get; set; }

    private RedirectedAppealModelDTO appeal = new();

    protected override async Task OnInitializedAsync()
    {
        if (Id != 0)
        {
            appeal = await RedirectedAppealDataService.GetRedirectedAppealById(Id);
        }
    }

    private async Task Approve() //turns out we can't have method with PageName
    {
        if (appeal != null)
        {
            appeal.DepartmentAssessment = "Да";
            //await RedirectedAppealDataService.DeleteRedirectedAppeal(Id); //httpClient.DeleteAsync($"api//{Id}");
            GotBack();
        }
    }

    private async Task Disapprove() //turns out we can't have method with PageName
    {
        if (appeal != null)
        {
            appeal.DepartmentAssessment = "Нет";
            //await RedirectedAppealDataService.DeleteRedirectedAppeal(Id); //httpClient.DeleteAsync($"api//{Id}");
            GotBack();
        }
    }

    private void GotBack()
    {
        navManager.NavigateTo($"/redirectedappealassessment/{appeal.District}/{appeal.PeriodInfo}/{appeal.YearInfo}");
    }
}
